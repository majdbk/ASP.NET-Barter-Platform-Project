@model IEnumerable<tntroc.WebApplication.Models.ExchangeModels>


@{
    ViewBag.Title = "ChartApi";
    Layout = "~/Views/Shared/_Layout.cshtml";


}

@{var ch7 = tntroc.Services.EchangeService.EchangeStats();}


@(Html.Kendo().Chart()
            .Name("chart")

            .HtmlAttributes(new { style = "height: 400px;" })
            .Title("Site Visitors Stats /thousands/")

            .Legend(legend => legend
                .Position(ChartLegendPosition.Bottom)
            )
            .SeriesDefaults(seriesDefaults => seriesDefaults
                .Column().Stack(true)
            )
            .Series(series =>
            {

                series.Column(p => ch7);

            })
            .CategoryAxis(axis => axis
                .Categories("Pendig", "Accepted", "Confirmed","Canceled")
            .MajorGridLines(lines => lines.Visible(false))
        )
        .ValueAxis(axis => axis
            .Numeric()
            .Line(line => line.Visible(false))
        )
        .Tooltip(tooltip => tooltip
            .Visible(true)
            .Format("{0}")
        )
)
<div class="box wide">
    <div class="box-col">
        <h4>API Functions</h4>
        <ul class="options">
            <li>
                <input id="typeColumn" name="seriesType"
                       type="radio" value="column" checked="checked" autocomplete="off" />
                <label for="typeColumn">Columns</label>
            </li>
            <li>
                <input id="typeBar" name="seriesType"
                       type="radio" value="bar" autocomplete="off" />
                <label for="typeBar">Bars</label>
            </li>
            <li>
                <input id="typeLine" name="seriesType"
                       type="radio" value="line" autocomplete="off" />
                <label for="typeLine">Lines</label>
            </li>
            <li>
                <input id="stack" type="checkbox" autocomplete="off" checked="checked" />
                <label for="stack">Stacked</label>
            </li>
        </ul>
        <p>
            <strong>refresh()</strong> will be called on each configuration change
        </p>
    </div>
</div>
<script>
    $(document).ready(function() {
        $(".options").bind("change", refresh);
        $(document).bind("kendo:skinChange", updateTheme);
    });

    function refresh() {
        var chart = $("#chart").data("kendoChart"),

            series = chart.options.series,
            type = $("input[name=seriesType]:checked").val(),
            stack = $("#stack").prop("checked");

        for (var i = 0, length = series.length; i < length; i++) {
            series[i].stack = stack;
            series[i].type = type;
        };

        chart.refresh();
    }

    function updateTheme() {
        $("#chart").getKendoChart().setOptions({ theme: kendoTheme });
    }
</script>





    @*@(Html.Kendo().Chart((IEnumerable<tntroc.WebApplication.Models.GoodsModels>)ViewData["fVM"])
        .Name("chart")
                .Title(title => title
                    .Text("Share of Internet Population Growth, 2007 - 2012")
                    .Position(ChartTitlePosition.Bottom))
        .Legend(legend => legend
            .Visible(false)
        )
        .ChartArea(chart => chart
            .Background("transparent")
         )

        .Series(series => 
                  series.Bar(p=>p.validity) //Create a Bar Chart series bound to the "Value" property.
                             
        )

          .CategoryAxis(axis => axis.Categories(p=>p.subCategory.category.name)
              )
    )*@




@*<div class="demo-section k-content wide">
    @(Html.Kendo().Chart((IEnumerable<tntroc.WebApplication.Models.GoodsModels>)ViewData["fVM"])
        .Name("chart")
        .Title(title => title
            .Text("Comments per day")
            .Align(ChartTextAlignment.Left)
        )
        .Legend(legend => legend
            .Visible(false)
        )
        .Series(series =>
        {
            series.Column(
               p=>p.label
            )
            .Labels(labels => labels.Background("transparent").Visible(true));
        })
        .CategoryAxis(axis => axis
            .Categories(p => p.validity)
            .MajorGridLines(lines => lines.Visible(false))
            .Line(line => line.Visible(false))
        )
        .ValueAxis(axis => axis.Numeric()
            .Max(28)
            .MajorGridLines(lines => lines.Visible(false))
            .Visible(false)
        )
    )
</div>*@

